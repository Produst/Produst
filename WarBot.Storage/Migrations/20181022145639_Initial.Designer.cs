// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarBot.Storage;

namespace WarBot.Storage.Migrations
{
    [DbContext(typeof(WarDB))]
    [Migration("20181022145639_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-preview1-35029")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WarBot.Storage.Models.DiscordGuild", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BotVersion");

                    b.Property<decimal>("EntityId")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<int>("Environment");

                    b.Property<int?>("HustleClanID");

                    b.Property<string>("Loot");

                    b.Property<string>("Name");

                    b.Property<int?>("NotificationSettingsID");

                    b.Property<string>("WarBOT_NickName");

                    b.Property<string>("WarBOT_Prefix");

                    b.Property<string>("Website");

                    b.HasKey("ID");

                    b.HasIndex("HustleClanID");

                    b.HasIndex("NotificationSettingsID");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("WarBot.Storage.Models.DiscordUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("EntityId")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<DateTimeOffset?>("LastActivity");

                    b.Property<DateTimeOffset?>("LastOnline");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WarBot.Storage.Models.GuildChannel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChannelType");

                    b.Property<decimal>("EntityId")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<int>("GuildID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("GuildID");

                    b.ToTable("GuildChannel");
                });

            modelBuilder.Entity("WarBot.Storage.Models.GuildNotificationsSettings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GreetingMessage");

                    b.Property<int>("GuildID");

                    b.Property<bool>("SendUpdateMessage");

                    b.Property<bool>("War1Enabled");

                    b.Property<bool>("War2Enabled");

                    b.Property<bool>("War3Enabled");

                    b.Property<bool>("War4Enabled");

                    b.Property<bool>("WarPrepEnding");

                    b.Property<string>("WarPrepEndingMessage");

                    b.Property<bool>("WarPrepStarted");

                    b.Property<string>("WarPrepStartedMessage");

                    b.Property<bool>("WarStarted");

                    b.Property<string>("WarStartedMessage");

                    b.HasKey("ID");

                    b.ToTable("GuildNotificationsSettings");
                });

            modelBuilder.Entity("WarBot.Storage.Models.GuildRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DiscordGuildID");

                    b.Property<decimal>("EntityId")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<int>("GuildID");

                    b.Property<int>("Level");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("DiscordGuildID");

                    b.ToTable("GuildRole");
                });

            modelBuilder.Entity("WarBot.Storage.Models.HustleCastle.HustleGuild", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GuildID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("HustleGuild");
                });

            modelBuilder.Entity("WarBot.Storage.Models.HustleCastle.HustleGuildSeason", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("DateEnd");

                    b.Property<int>("GuildID");

                    b.Property<int?>("HustleGuildID");

                    b.Property<long>("MinimumGameGlory");

                    b.Property<long>("MinimumGuildGlory");

                    b.HasKey("ID");

                    b.HasIndex("HustleGuildID");

                    b.ToTable("HustleGuildSeason");
                });

            modelBuilder.Entity("WarBot.Storage.Models.HustleCastle.HustleUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("CurrentGuildID");

                    b.Property<int?>("DiscordUserID");

                    b.Property<bool>("IsActiveCharacter");

                    b.Property<DateTimeOffset>("JoinDate");

                    b.Property<long>("SquadPower");

                    b.Property<byte>("ThroneRoomLevel");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CurrentGuildID");

                    b.HasIndex("DiscordUserID");

                    b.ToTable("HustleUser");
                });

            modelBuilder.Entity("WarBot.Storage.Models.HustleCastle.HustleUserSeason", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Glory");

                    b.Property<int?>("HustleUserID");

                    b.Property<int?>("SeasonID");

                    b.Property<int>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("HustleUserID");

                    b.HasIndex("SeasonID");

                    b.ToTable("HustleUserSeason");
                });

            modelBuilder.Entity("WarBot.Storage.Models.HustleCastle.LootItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int?>("HustleGuildSeasonID");

                    b.Property<int?>("HustleUserSeasonID");

                    b.Property<int?>("HustleUserSeasonID1");

                    b.Property<string>("Name");

                    b.Property<int?>("WinningUserId")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("HustleGuildSeasonID");

                    b.HasIndex("HustleUserSeasonID");

                    b.HasIndex("HustleUserSeasonID1");

                    b.ToTable("LootItem");
                });

            modelBuilder.Entity("WarBot.Storage.Models.Voting.Poll", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ChannelId")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<decimal>("MessageId")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.HasKey("ID");

                    b.ToTable("Polls");
                });

            modelBuilder.Entity("WarBot.Storage.Models.Voting.PollOption", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PollID");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("PollID");

                    b.ToTable("PollOption");
                });

            modelBuilder.Entity("WarBot.Storage.Models.Voting.UserVote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OptionID");

                    b.Property<int>("PollID");

                    b.HasKey("ID");

                    b.HasIndex("PollID");

                    b.ToTable("UserVote");
                });

            modelBuilder.Entity("WarBot.Storage.Models.DiscordGuild", b =>
                {
                    b.HasOne("WarBot.Storage.Models.HustleCastle.HustleGuild", "HustleClan")
                        .WithMany()
                        .HasForeignKey("HustleClanID");

                    b.HasOne("WarBot.Storage.Models.GuildNotificationsSettings", "NotificationSettings")
                        .WithMany()
                        .HasForeignKey("NotificationSettingsID");
                });

            modelBuilder.Entity("WarBot.Storage.Models.GuildChannel", b =>
                {
                    b.HasOne("WarBot.Storage.Models.DiscordGuild", "Guild")
                        .WithMany("Channels")
                        .HasForeignKey("GuildID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WarBot.Storage.Models.GuildRole", b =>
                {
                    b.HasOne("WarBot.Storage.Models.DiscordGuild")
                        .WithMany("Roles")
                        .HasForeignKey("DiscordGuildID");
                });

            modelBuilder.Entity("WarBot.Storage.Models.HustleCastle.HustleGuildSeason", b =>
                {
                    b.HasOne("WarBot.Storage.Models.HustleCastle.HustleGuild")
                        .WithMany("Seasons")
                        .HasForeignKey("HustleGuildID");
                });

            modelBuilder.Entity("WarBot.Storage.Models.HustleCastle.HustleUser", b =>
                {
                    b.HasOne("WarBot.Storage.Models.HustleCastle.HustleGuild", "CurrentGuild")
                        .WithMany("Users")
                        .HasForeignKey("CurrentGuildID");

                    b.HasOne("WarBot.Storage.Models.DiscordUser")
                        .WithMany("Characters")
                        .HasForeignKey("DiscordUserID");
                });

            modelBuilder.Entity("WarBot.Storage.Models.HustleCastle.HustleUserSeason", b =>
                {
                    b.HasOne("WarBot.Storage.Models.HustleCastle.HustleUser")
                        .WithMany("Seasons")
                        .HasForeignKey("HustleUserID");

                    b.HasOne("WarBot.Storage.Models.HustleCastle.HustleGuildSeason", "Season")
                        .WithMany("UserData")
                        .HasForeignKey("SeasonID");
                });

            modelBuilder.Entity("WarBot.Storage.Models.HustleCastle.LootItem", b =>
                {
                    b.HasOne("WarBot.Storage.Models.HustleCastle.HustleGuildSeason")
                        .WithMany("AvailableLoot")
                        .HasForeignKey("HustleGuildSeasonID");

                    b.HasOne("WarBot.Storage.Models.HustleCastle.HustleUserSeason")
                        .WithMany("GreedItems")
                        .HasForeignKey("HustleUserSeasonID");

                    b.HasOne("WarBot.Storage.Models.HustleCastle.HustleUserSeason")
                        .WithMany("NeedItems")
                        .HasForeignKey("HustleUserSeasonID1");
                });

            modelBuilder.Entity("WarBot.Storage.Models.Voting.PollOption", b =>
                {
                    b.HasOne("WarBot.Storage.Models.Voting.Poll")
                        .WithMany("Options")
                        .HasForeignKey("PollID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WarBot.Storage.Models.Voting.UserVote", b =>
                {
                    b.HasOne("WarBot.Storage.Models.Voting.Poll")
                        .WithMany("Votes")
                        .HasForeignKey("PollID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
